#source "big-input.txt"

	' * StructType pair (offset 0)
	' * ArrayType acme (offset 3)
	' * ArrayType fibonacci (offset 11)
	call	main
halt
#line 14

p:
	enter	0
	' * Parameters
	' * Local variables
	ret 0, 0, 0
	' * End of FunctionDefinition: p
#line 16

f:
	enter	7
	' * Parameters
	' * RealType r ( offset 6)
	' * IntType e ( offset 4)
	' * Local variables
	' * RealType real (offset -4)
	' * CharType c (offset -5)
	' * IntType result (offset -7)
#line 20
	' * Assignment [Variable [real] = BinaryExp [Variable [r] * RealLit [10.0]]]
	push bp
	pushi -4
	addi
	push bp
	pushi 6
	addi
	loadf
	pushf 10.0
	mulf
	storef
	' * End of Assignment
#line 21
	' * Assignment [Variable [c] = CharLit [0]]
	push bp
	pushi -5
	addi
	pushb 48
	storeb
	' * End of Assignment
#line 22
	' * If [(BinaryExp [Variable [e] < IntLit [256]])]
	push bp
	pushi 4
	addi
	loadi
	pushi 256
	lti
	jz label0
	' * If Body
#line 23
	' * Assignment [Variable [c] = Cast [(Char) Variable [e]]]
	push bp
	pushi -5
	addi
	push bp
	pushi 4
	addi
	loadi
	i2b
	storeb
	' * End of Assignment
#line 24
	' * Assignment [Variable [result] = Cast [(Int) Variable [c]]]
	push bp
	pushi -7
	addi
	push bp
	pushi -5
	addi
	loadb
	b2i
	storei
	' * End of Assignment
	jmp label1
label0:
	' * Else Body
#line 27
	' * Assignment [Variable [result] = Cast [(Int) Variable [real]]]
	push bp
	pushi -7
	addi
	push bp
	pushi -4
	addi
	loadf
	f2i
	storei
	' * End of Assignment
label1:
	' * End of If
#line 28
	' * Return
	push bp
	pushi -7
	addi
	loadi
	ret 2, 7, 6
	' * End of FunctionDefinition: f
#line 31

initialize:
	enter	2
	' * Parameters
	' * Local variables
	' * IntType i (offset -2)
#line 33
	' * Assignment [ArrayAccess [ArrayAccess [Variable [fibonacci][IntLit [0]]][IntLit [0]]] = IntLit [0]]
	pusha 11
	pushi 0
	pushi 6
	muli
	addi
	pushi 0
	pushi 2
	muli
	addi
	pushi 0
	storei
	' * End of Assignment
#line 34
	' * Assignment [ArrayAccess [ArrayAccess [Variable [fibonacci][IntLit [0]]][IntLit [1]]] = IntLit [1]]
	pusha 11
	pushi 0
	pushi 6
	muli
	addi
	pushi 1
	pushi 2
	muli
	addi
	pushi 1
	storei
	' * End of Assignment
#line 35
	' * Assignment [ArrayAccess [ArrayAccess [Variable [fibonacci][IntLit [0]]][IntLit [2]]] = IntLit [1]]
	pusha 11
	pushi 0
	pushi 6
	muli
	addi
	pushi 2
	pushi 2
	muli
	addi
	pushi 1
	storei
	' * End of Assignment
#line 36
	' * Assignment [Variable [i] = IntLit [1]]
	push bp
	pushi -2
	addi
	pushi 1
	storei
	' * End of Assignment
#line 37
	' * While [(BinaryExp [Variable [i] < IntLit [8]])]
label2:
	push bp
	pushi -2
	addi
	loadi
	pushi 8
	lti
	jz label3
	' * While body
#line 38
	' * Assignment [ArrayAccess [ArrayAccess [Variable [fibonacci][Variable [i]]][IntLit [0]]] = ArrayAccess [ArrayAccess [Variable [fibonacci][BinaryExp [Variable [i] - IntLit [1]]]][IntLit [1]]]]
	pusha 11
	push bp
	pushi -2
	addi
	loadi
	pushi 6
	muli
	addi
	pushi 0
	pushi 2
	muli
	addi
	pusha 11
	push bp
	pushi -2
	addi
	loadi
	pushi 1
	subi
	pushi 6
	muli
	addi
	pushi 1
	pushi 2
	muli
	addi
	loadi
	storei
	' * End of Assignment
#line 39
	' * Assignment [ArrayAccess [ArrayAccess [Variable [fibonacci][Variable [i]]][IntLit [1]]] = ArrayAccess [ArrayAccess [Variable [fibonacci][BinaryExp [Variable [i] - IntLit [1]]]][IntLit [2]]]]
	pusha 11
	push bp
	pushi -2
	addi
	loadi
	pushi 6
	muli
	addi
	pushi 1
	pushi 2
	muli
	addi
	pusha 11
	push bp
	pushi -2
	addi
	loadi
	pushi 1
	subi
	pushi 6
	muli
	addi
	pushi 2
	pushi 2
	muli
	addi
	loadi
	storei
	' * End of Assignment
#line 40
	' * Assignment [ArrayAccess [ArrayAccess [Variable [fibonacci][Variable [i]]][IntLit [2]]] = BinaryExp [ArrayAccess [ArrayAccess [Variable [fibonacci][Variable [i]]][IntLit [0]]] + ArrayAccess [ArrayAccess [Variable [fibonacci][Variable [i]]][IntLit [1]]]]]
	pusha 11
	push bp
	pushi -2
	addi
	loadi
	pushi 6
	muli
	addi
	pushi 2
	pushi 2
	muli
	addi
	pusha 11
	push bp
	pushi -2
	addi
	loadi
	pushi 6
	muli
	addi
	pushi 0
	pushi 2
	muli
	addi
	loadi
	pusha 11
	push bp
	pushi -2
	addi
	loadi
	pushi 6
	muli
	addi
	pushi 1
	pushi 2
	muli
	addi
	loadi
	addi
	storei
	' * End of Assignment
#line 41
	' * Assignment [Variable [i] = BinaryExp [Variable [i] + IntLit [1]]]
	push bp
	pushi -2
	addi
	push bp
	pushi -2
	addi
	loadi
	pushi 1
	addi
	storei
	' * End of Assignment
	jmp label2
label3:
	' * End of while
	ret 0, 2, 0
	' * End of FunctionDefinition: initialize
#line 47

main:
	enter	4
	' * Parameters
	' * Local variables
	' * IntType i (offset -2)
	' * IntType j (offset -4)
#line 49
	' * Invocation [p ([])]
	call	p
	' * End of invocation: p
#line 50
	' * Assignment [Variable [i] = IntLit [0]]
	push bp
	pushi -2
	addi
	pushi 0
	storei
	' * End of Assignment
#line 51
	' * Assignment [FieldAccess [Variable [pair].character] = CharLit [0]]
	pusha 0
	pushi 2
	addi
	pushb 48
	storeb
	' * End of Assignment
#line 52
	' * Assignment [FieldAccess [Variable [pair].integer] = Cast [(Int) CharLit [0]]]
	pusha 0
	pushi 0
	addi
	pushb 48
	b2i
	storei
	' * End of Assignment
#line 55
	' * Start of Write
	push bp
	pushi -2
	addi
	loadi
	i2f
	pusha 0
	pushi 2
	addi
	loadb
	b2i
	call	f
	outi
	pushb 10
	outb
	' * End of Write
#line 56
	' * Invocation [f ([RealLit [1.3], IntLit [2]])]
	pushf 1.3
	pushi 2
	call	f
	popi
	' * End of invocation: f
#line 58
	' * Invocation [initialize ([])]
	call	initialize
	' * End of invocation: initialize
#line 59
	' * Assignment [Variable [i] = IntLit [0]]
	push bp
	pushi -2
	addi
	pushi 0
	storei
	' * End of Assignment
#line 60
	' * While [(BinaryExp [Variable [i] < IntLit [8]])]
label4:
	push bp
	pushi -2
	addi
	loadi
	pushi 8
	lti
	jz label5
	' * While body
#line 62
	' * Start of Write
	pushb 40
	outb
	push bp
	pushi -2
	addi
	loadi
	pushi 1
	addi
	outi
	pushb 41
	outb
	pusha 11
	push bp
	pushi -2
	addi
	loadi
	pushi 6
	muli
	addi
	pushi 0
	pushi 2
	muli
	addi
	loadi
	outi
	pushb 43
	outb
	pusha 11
	push bp
	pushi -2
	addi
	loadi
	pushi 6
	muli
	addi
	pushi 1
	pushi 2
	muli
	addi
	loadi
	outi
	pushb 61
	outb
	pusha 11
	push bp
	pushi -2
	addi
	loadi
	pushi 6
	muli
	addi
	pushi 2
	pushi 2
	muli
	addi
	loadi
	outi
	pushb 10
	outb
	' * End of Write
#line 65
	' * Assignment [Variable [i] = BinaryExp [Variable [i] + IntLit [1]]]
	push bp
	pushi -2
	addi
	push bp
	pushi -2
	addi
	loadi
	pushi 1
	addi
	storei
	' * End of Assignment
	jmp label4
label5:
	' * End of while
#line 68
	' * Assignment [FieldAccess [ArrayAccess [FieldAccess [ArrayAccess [Variable [acme][IntLit [1]]].employees][IntLit [1]]].age] = IntLit [56]]
	pusha 3
	pushi 1
	pushi 4
	muli
	addi
	pushi 0
	addi
	pushi 1
	pushi 2
	muli
	addi
	pushi 0
	addi
	pushi 56
	storei
	' * End of Assignment
#line 70
	' * Start of Write
	pusha 3
	pushi 1
	pushi 4
	muli
	addi
	pushi 0
	addi
	pushi 1
	pushi 2
	muli
	addi
	pushi 0
	addi
	loadi
	outi
	pushb 10
	outb
	' * End of Write
#line 71
	' * Assignment [Variable [i] = IntLit [0]]
	push bp
	pushi -2
	addi
	pushi 0
	storei
	' * End of Assignment
#line 72
	' * While [(BinaryExp [Variable [i] < IntLit [2]])]
label6:
	push bp
	pushi -2
	addi
	loadi
	pushi 2
	lti
	jz label7
	' * While body
#line 73
	' * Assignment [Variable [j] = IntLit [0]]
	push bp
	pushi -4
	addi
	pushi 0
	storei
	' * End of Assignment
#line 74
	' * While [(BinaryExp [Variable [j] < IntLit [2]])]
label8:
	push bp
	pushi -4
	addi
	loadi
	pushi 2
	lti
	jz label9
	' * While body
#line 75
	' * Assignment [FieldAccess [ArrayAccess [FieldAccess [ArrayAccess [Variable [acme][Variable [i]]].employees][Variable [j]]].age] = BinaryExp [Variable [i] + Variable [j]]]
	pusha 3
	push bp
	pushi -2
	addi
	loadi
	pushi 4
	muli
	addi
	pushi 0
	addi
	push bp
	pushi -4
	addi
	loadi
	pushi 2
	muli
	addi
	pushi 0
	addi
	push bp
	pushi -2
	addi
	loadi
	push bp
	pushi -4
	addi
	loadi
	addi
	storei
	' * End of Assignment
#line 76
	' * Assignment [Variable [j] = BinaryExp [Variable [j] + IntLit [1]]]
	push bp
	pushi -4
	addi
	push bp
	pushi -4
	addi
	loadi
	pushi 1
	addi
	storei
	' * End of Assignment
	jmp label8
label9:
	' * End of while
#line 78
	' * Assignment [Variable [i] = BinaryExp [Variable [i] + IntLit [1]]]
	push bp
	pushi -2
	addi
	push bp
	pushi -2
	addi
	loadi
	pushi 1
	addi
	storei
	' * End of Assignment
	jmp label6
label7:
	' * End of while
#line 82
	' * Assignment [Variable [i] = IntLit [0]]
	push bp
	pushi -2
	addi
	pushi 0
	storei
	' * End of Assignment
#line 83
	' * While [(BinaryExp [Variable [i] < IntLit [2]])]
label10:
	push bp
	pushi -2
	addi
	loadi
	pushi 2
	lti
	jz label11
	' * While body
#line 84
	' * Assignment [Variable [j] = IntLit [0]]
	push bp
	pushi -4
	addi
	pushi 0
	storei
	' * End of Assignment
#line 85
	' * While [(BinaryExp [Variable [j] < IntLit [2]])]
label12:
	push bp
	pushi -4
	addi
	loadi
	pushi 2
	lti
	jz label13
	' * While body
#line 87
	' * Start of Write
	pusha 3
	push bp
	pushi -2
	addi
	loadi
	pushi 4
	muli
	addi
	pushi 0
	addi
	push bp
	pushi -4
	addi
	loadi
	pushi 2
	muli
	addi
	pushi 0
	addi
	loadi
	outi
	pushb 32
	outb
	' * End of Write
#line 88
	' * Assignment [Variable [j] = BinaryExp [Variable [j] + IntLit [1]]]
	push bp
	pushi -4
	addi
	push bp
	pushi -4
	addi
	loadi
	pushi 1
	addi
	storei
	' * End of Assignment
	jmp label12
label13:
	' * End of while
#line 90
	' * Assignment [Variable [i] = BinaryExp [Variable [i] + IntLit [1]]]
	push bp
	pushi -2
	addi
	push bp
	pushi -2
	addi
	loadi
	pushi 1
	addi
	storei
	' * End of Assignment
	jmp label10
label11:
	' * End of while
	ret 0, 4, 0
	' * End of FunctionDefinition: main
' * END of program
